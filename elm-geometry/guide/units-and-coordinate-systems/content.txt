
2D/3D geometry is often represented using X/Y/Z coordinates. For example, in
previous versions of `elm-geometry`, we might have constructed a 2D point as

```elm
point =
    Point2d.fromCoordinates ( 200, 300 )
```

What does `300` mean here though? 300 meters? 300 pixels? If the numbers are in
pixels, and this is an on-screen point, is the X direction right or left? Is Y
up or down? Is the point (0, 0) at the upper left corner of the screen, the
lower left, the center, or somewhere else entirely?

## Units

To answer the first question, `elm-geometry` now uses the generic `Quantity`
type from `elm-units` for all coordinate values, instead of using plain `Float`s
or `Int`s. The above example might now be written as

```elm
point =
    Point2d.fromCoordinates
        ( Length.meters 200
        , Length.meters 300
        )
```

or

```elm
point =
    Point2d.fromCoordinates
        ( Pixels.pixels 200
        , Pixels.pixels 300
        )
```

This makes it explicit what units the point is in (in a way that can be type
checked by the Elm compiler!) but doesn't address the remaining questions.

## Coordinate systems

In addition to tracking what units are used, `elm-geometry` also lets you add
(optional) type annotations to specify what _coordinate system_ a particular
point is defined in. For example, we might declare a `TopLeft` type and then
add a type annotation to `point` asserting that it is defined in coordinates
relative to the top-left corner of the screen:

```elm
{-| A coordinate system where (0, 0) is the top left
corner of the screen, positive X is to the right and
positive Y is down.
-}
type TopLeft =
    TopLeft

point : Point2d Pixels TopLeft
point =
    Point2d.fromCoordinates
        ( Pixels.pixels 200
        , Pixels.pixels 300
        )
```

Note that the `TopLeft` type we declared gives us a convenient place to document
exactly how that coordinate system is defined. This combination now gives us
some nice type safety - the compiler will tell us if we try to mix two points
that have different units or are defined in different coordinate systems.

## Unit conversion

It is often necessary to convert between different units. For example, we might
have some 2D geometry in real-world dimensions (`Meters`) and want to draw that
on the screen (in `Pixels`). To do that, we need to define a conversion factor
between `Meters` and `Pixels`; for example, perhaps we want 1 meter in the real
world to take up 20 pixels on screen. Conversion factors like this are defined
using an `elm-units` [`Rate`][rate] quantity value:

```elm
pixelsPerMeter =
    Pixels.pixels 20 |> Quantity.per (Length.meters 1)
```

Then we can convert back and forth using functions such as `Point2d.at` and
`Point2d.at_` (following the same pattern as [`Quantity.at`][at] and
[`Quantity.at_`][at_]):

```elm
worldPoint =
    Point2d.fromCoordinates
        ( Length.meters 2
        , Length.meters 3
        )

screenPoint =
    worldPoint |> Point2d.at pixelsPerMeter
--> Point2d.fromCoordinates
-->     ( Pixels.pixels 20
-->     , Pixels.pixels 60
-->     )
```

[rate]: https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/Quantity#Rate
[at]: https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/Quantity#at
[at_]: https://package.elm-lang.org/packages/ianmackenzie/elm-units/latest/Quantity#at_
